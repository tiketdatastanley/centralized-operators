name: Sum op
inputs:
- name: num1
  type: Float
- name: num2
  type: Float
outputs:
- name: output
  type: Float
implementation:
  container:
    image: asia-docker.pkg.dev/tk-test-data/kubebuild/operators/sum_op:v1.0.0
    command:
    - sh
    - -ec
    - 'program_path=$(mktemp)

      printf "%s" "$0" > "$program_path"

      python3 -u "$program_path" "$@"

      '
    - "def sum_op(num1, num2):\n    from src.core import Adder\n\n    obj = Adder()\n\
      \    out = obj(num1, num2)\n\n    return (out, )\n\ndef _serialize_float(float_value:\
      \ float) -> str:\n    if isinstance(float_value, str):\n        return float_value\n\
      \    if not isinstance(float_value, (float, int)):\n        raise TypeError('Value\
      \ \"{}\" has type \"{}\" instead of float.'.format(str(float_value), str(type(float_value))))\n\
      \    return str(float_value)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog='Sum\
      \ op', description='')\n_parser.add_argument(\"--num1\", dest=\"num1\", type=float,\
      \ required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--num2\"\
      , dest=\"num2\", type=float, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"\
      ----output-paths\", dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args\
      \ = vars(_parser.parse_args())\n_output_files = _parsed_args.pop(\"_output_paths\"\
      , [])\n\n_outputs = sum_op(**_parsed_args)\n\n_output_serializers = [\n    _serialize_float,\n\
      \n]\n\nimport os\nfor idx, output_file in enumerate(_output_files):\n    try:\n\
      \        os.makedirs(os.path.dirname(output_file))\n    except OSError:\n  \
      \      pass\n    with open(output_file, 'w') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"
    args:
    - --num1
    - inputValue: num1
    - --num2
    - inputValue: num2
    - '----output-paths'
    - outputPath: output
