name: Sum op
inputs:
- {name: num1, type: Float}
- {name: num2, type: Float}
outputs:
- {name: output, type: Float}
implementation:
  container:
    image: asia-docker.pkg.dev/tk-test-data/kubebuild/operators/sum_op:v1.0.0
    command:
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - |
      def sum_op(num1, num2):
          from src.core import Adder

          obj = Adder()
          out = obj(num1, num2)

          return (out, )

      def _serialize_float(float_value: float) -> str:
          if isinstance(float_value, str):
              return float_value
          if not isinstance(float_value, (float, int)):
              raise TypeError('Value "{}" has type "{}" instead of float.'.format(
                  str(float_value), str(type(float_value))))
          return str(float_value)

      import argparse
      _parser = argparse.ArgumentParser(prog='Sum op', description='')
      _parser.add_argument("--num1", dest="num1", type=float, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--num2", dest="num2", type=float, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
      _parsed_args = vars(_parser.parse_args())
      _output_files = _parsed_args.pop("_output_paths", [])

      _outputs = sum_op(**_parsed_args)

      _output_serializers = [
          _serialize_float,

      ]

      import os
      for idx, output_file in enumerate(_output_files):
          try:
              os.makedirs(os.path.dirname(output_file))
          except OSError:
              pass
          with open(output_file, 'w') as f:
              f.write(_output_serializers[idx](_outputs[idx]))
    args:
    - --num1
    - {inputValue: num1}
    - --num2
    - {inputValue: num2}
    - '----output-paths'
    - {outputPath: output}
